def image = 'jmpcba/hc_infra_build:latest'
def ansi = 'gnome-terminal'

docker.image(image).inside{
    stage('Clone'){
        checkout scm
    }
    stage('Plan') {
        ansiColor(ansi) {
            echo "##################"
            echo "# TERRAFORM PLAN #"
            echo "##################"
            echo "BRANCH: ${env.GIT_LOCAL_BRANCH}"
            env.each{
                echo e
            }
            dir('infra') {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AWS_JMPCBA', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh '''
                        set +x
                        terraform version
                        terraform init
                        terraform plan
                        '''
                }
            }
        }
    }


    if (params.APPLY && env.GIT_BRANCH == 'master'){
        stage('Apply') {
            ansiColor(ansiColor) {
                echo "###################"
                echo "# TERRAFORM APPLY #"
                echo "###################"
                
                dir('infra') {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AWS CREDENTIALS', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'], string(credentialsId: 'TF_VAR_db_password', variable: 'TF_VAR_db_password')]) {
                        sh '''
                            set +x
                            terraform version
                            terraform init
                            terraform apply -auto-approve
                            '''
                    }
                }
            }
        }
    }
}