def image = 'jmpcba/hc_infra_build:latest'
def ansi = 'gnome-terminal'

docker.image(image).inside{
    stage('Clone'){
        checkout scm
    }

    if (!params.APPLY){
        stage('Plan') {
            ansiColor(ansi) {
                echo "##################"
                echo "# TERRAFORM PLAN #"
                echo "##################"
                dir('infra') {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AWS_JMPCBA', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        sh '''
                            set +x
                            terraform version
                            terraform init
                            terraform plan
                            '''
                    }
                }
            }
        }
    }


    if (params.APPLY){
        stage('Apply') {
            ansiColor(ansi) {
                echo "###################"
                echo "# TERRAFORM APPLY #"
                echo "###################"
                
                dir('infra') {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AWS_JMPCBA', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        withCredentials([string(credentialsId: 'DB_MASTER_PASSWORD', variable: 'TF_VAR_db_password')]) {
                            sh '''
                            set +x
                            terraform apply -auto-approve
                            '''
                        }
                    }
                }
            }
        }
    }
}